[{"content":"Kaggle MoAにTeam 90\u0026rsquo;sで初参加 （コンペの詳細な内容については割愛します）\n今回のMoAコンペでは，同世代のメンバーでチームを組んで取り組みました！\nチームでの取り組みはとにかく学びが多く，終盤までモチベーションを保つことができたのが大きかったです．\nまた，議論することで理解なども深まっていくので，コンペを通してより成長できたんじゃないかなと思います．\n僕たちのチームでの取り組み方針を簡単に挙げると\n1. 情報はSlackで共有\n2. 分析方針や実験結果はGithubのissueで管理\n3. 毎週末に2時間程度のディスカッション\nといった感じです．\n3番目の週末のディスカッションは強制ではなく，参加可能な人が参加する形式で運用してました． （と言いつつもみんな真面目に毎回参加してました笑）\nチームでの取り組み方針の具体的な内容について少しだけ掘り下げます．\n1. 情報はSlackで共有 Slackをどうゆう感じで活用していたのかというと， コンペのDiscussionやNotebookの内容について疑問点などを話し合ったり，それ以外にも進め方の相談や雑談などを基本的に行っていました． あとはsubmitする時は一言声をかけるなどのsubmit管理もしていました．\nこうゆうのがあれば良かったなーというところでは，新着のDiscussionやNotebookをKaggleから連携して通知する仕組みを用意しておければ尚良かったのかなと思いました．\n2. 分析方針や実験結果はGithubのissueで管理 Githubをどうゆう感じで活用していたのかというと， 分析での実験毎に1つのissueを立てて，そこでどうゆう実験をしたのかsubmitした結果のスコアがどうだったのかなどを記録として残してました． また，共通で使える特徴量生成のコードだったり，CVの切り方のコードなどの共有も行ってました．\nその他にはDiscussionの内容を整理したり，情報をまとめるために活用したりしていました．\n3. 毎週末に2時間程度のディスカッション 週末のGoogle meetでのオンラインディスカッションで何をしていたかというと， 基本的には，今週何をしたのかを各々共有したり，わからない部分を話し合ってどうゆうふうに次進めて行くかなどをチームで考えていました． あとは，次の週でどうゆうことをするかの方向性を決めて終わる感じでした．\nもちろん雑談や仕事での苦労を労ったりもしていました笑\n最終順位 最終順位は4373チーム中34位の銀メダルで、金メダルまであともう少しのところまで行ったので，とても悔しい結果となりました．\n個人的にはInferenceの処理がエラーで通らない状況に最後の3日ぐらいでなって泣きそうになりました． チームメンバーにはweight0の状態で非常に申し訳なかったなと思ってます泣\n学習時に回していたノートブックでは，スコアがチーム内で作ったモデルの中でも上位5つ以内に入っていたので，アンサンブル時には効いてただろうなと思うと尚更です．\n個人的な成長としては，テーブルデータに対してNeuralNetが有効に作用する場面について多少理解が深まったと感じています．\n今回のMoAでは，マルチラベルの予測だったので，一度に大量のクラスを予測する場合にはNNが有効でかつGBDT系と比較して計算速度も速いんだなと感じました．\nまた，特徴量的にも交互作用的な部分はNN内部の中間層の組み方などで実現できるので，GBDT系みたく大量に特徴量を用意しなくても対処できるのが大きいのかなと思っています．（今回のケースだとGBDTで大量のモデルを作るとなると速度的な部分で特徴量が膨大になるとかなり厳しい感じでした）\nあとは，NNの実装をPytorchで行ったこともあり，Pytorchの扱い方がわかるようになったのは大きいと思っています．（仕事ではTensorflowだったりするので\u0026hellip;）\nPytorchでの実装に関してはもっと進めて行きたいので，次に参加予定の画像系のコンペでも使って使い方を理解して行きたいです．\n","date":"2020-12-11","permalink":"https://masatakashiwagi.github.io/portfolio/post/kaggle-moa/","tags":["kaggle"],"title":"Kaggle MoAの振り返り"},{"content":"リストの更新処理でハマってしまった失敗 今回は，初期化したリストを更新した際にハマってしまった失敗があるので，備忘録として残しておきます．\npythonで決まった形のリストを予め作成しておきたい場合に，以下のようにすることがあると思います．\nshape you want: [[0, 0], [0, 0], [0, 0]] # 要素が2つあるリストが3つ \u0026gt;\u0026gt;\u0026gt; list1 = [[0] * 2] * 3 \u0026gt;\u0026gt;\u0026gt; list1 [[0, 0], [0, 0], [0, 0]]  そして，上記リストを何かしらの値で更新したい場合を考えます． 今回だと，[0][0]の要素を更新するとします．\n\u0026gt;\u0026gt;\u0026gt; list1[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list1 [[3.5, 0], [3.5, 0], [3.5, 0]]  結果は，各リストの0番目の要素が全て更新されています． この原因は，list1 = [[0] * 2] * 3と書くと，要素のリストが全て同じオブジェクトになってしまうからです．\n\u0026gt;\u0026gt;\u0026gt; id(list1[0]) == id(list1[1]) == id(list1[2]) True  これにより，どこかの要素を変更すると全て変わってしまうということになります．\n多次元配列の初期化時の注意 上記の結果を回避するためにはリスト内包表記を使うと解決することができます． 先程の例の場合，以下のように書くといいです．\n\u0026gt;\u0026gt;\u0026gt; list2 = [[0] * 2 for i in range(3)] \u0026gt;\u0026gt;\u0026gt; list2 [[0, 0], [0, 0], [0, 0]]  内包表記を使うと，リストはそれぞれ異なるオブジェクトとして扱われます．\n\u0026gt;\u0026gt;\u0026gt; id(list2[0]) == id(list2[1]) == id(list2[2]) False  ですので，[0][0]の要素を更新すると，意図した部分だけが更新され問題ありません．\n\u0026gt;\u0026gt;\u0026gt; list2[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list2 [[3.5, 0], [0, 0], [0, 0]]  リストを初期化する際はこれらに注意しておかないと，本来の意図とは違う動きになってしまいます．\n参考 Pythonのリスト（配列）を任意の値・要素数で初期化\n","date":"2020-09-12","permalink":"https://masatakashiwagi.github.io/portfolio/post/list-objects/","tags":["python","tips"],"title":"ネストしたリストの更新処理"},{"content":"ポートフォリオ作成 こちらのQiitaの記事でHugoを使って簡単にポートフォリオを作成できるというのを見かけたので，以前まで使っていたpersonal pageを移植しました．\n移植した際に少し詰まった部分があるので，Tipsとしてこの記事で紹介します．\nこの記事は以前に使用していたHugo Themeの内容になります\n最初はHugo Theme Cactus Plusというテーマで作成していたのですが，再度作り直してます．\n（再作成した理由は，少しだけ凝ったテーマを使って見たくなったためです笑）\n作り直したテーマはHugo Future Imperfect Slimになります．\nHugoはシンプルなデザインが多いので非常にオススメです．\n基本的な構築方法は上記Qiitaの記事に沿って行っています．\n別途追加した要素としては，最初に作成したHugo Theme Cactus Plusと作り直したHugo Future Imperfect Slimそれぞれありますので，この際どちらも紹介します．\n  Hugo Theme Cactus Plus\n メニューの追加設定 Custom-CSSの設定（custom-cssの設定は簡単に設定できますので，今回は割愛します）    Hugo Future Imperfect Slim\n faviconの設定 github.ioでサイトをhostした場合のpath設定    個人的には，1回目に作成したテーマより2回目の方が簡単でした．\nHugo Theme Cactus Plus: メニューの追加設定 Hugo Theme Cactus Plusのテーマでは，デフォルトでAbout/Archive/Tagsの3つがメニューとして存在しています．\n今回はそこにProjectsを新しく追加しましたので，その方法を記載します．\n実施することとしては，以下の4ステップになります．\n content配下にprojectsディレクトリを作成し，_index.mdファイルを配置する．\n記事などのページ情報はcontentで管理します．  ├── content │ ├── about │ ├── posts │ └── projects │ └── _index.md   themes/layouts/partials配下にあるnav.htmlにProjectsのリンクを追記する．\nこれはTagsなどのリンクをコピーして，nameの部分はprojectsに修正すれば大丈夫です．\nメニューバーにProjectsを表示させるために，この部分を修正する必要があります．\n  themes/layouts/section配下にabout.htmlをコピーして，projects.htmlにrenameする．\nここに追加することで，セクションのトップページとして扱われることになります．\n  最後に，コマンドラインでhugoを実行する．\nhugoコマンドを実行することで，必要なものが自動生成・反映されます．\n  以上でメニューを追加することができます．\n（他のテーマでは，もう少し簡単にメニュー追加が可能なものもあります）\nHugo Future Imperfect Slim: faviconの設定 faviconを設定する方法は，下記の3ステップになります．\n まず，下記のデフォルトのconfig.tomlの内容のうち，faviconとfaviconVersionを変更します．  [params.meta] description = \u0026quot;A theme by HTML5 UP, ported by Julio Pescador. Slimmed and enhanced by Patrick Collins. Multilingual by StatnMap. Powered by Hugo.\u0026quot; author = \u0026quot;HTML5UP and Hugo\u0026quot; favicon = false \u0026lt;-- trueに変更する svg = true faviconVersion = \u0026quot;1\u0026quot; \u0026lt;-- 1を削除する msColor = \u0026quot;#ffffff\u0026quot; iOSColor = \u0026quot;#ffffff\u0026quot;   config.tomlを修正したら，static配下にfaviconディレクトリを作成する．\n  static/favicon配下にfavicon.icoとfavicon-32x32.pngを配置する．\nなぜfavicon-32x32かというと？\n layouts/partials/meta.htmlのrel=iconに以下が記載されている  favicon-32x32 favicon-16x16 site.webmanifest    なので，これに合わせて名前を変更するかwebmanifestを新しく作成し，その中に諸々の内容を記載する必要がある．\n  Hugo Future Imperfect Slim: github.ioでサイトをhostした場合のpath設定 今回作成したサイトをgithub.ioでhostした場合に発生した内容です．\n各メニューのURLとして，https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/home/などとなって欲しいのですが， https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/portfolio/home/とportfolioが重なってしまうエラーが発生しました．\n上記エラーを回避する方法の紹介になります．\nconfig.tomlファイルに各メニューの設定をする箇所があります．\n[menu] [[menu.main]] name = \u0026quot;Home\u0026quot; identifier = \u0026quot;home\u0026quot; url = \u0026quot;/\u0026quot; \u0026lt;-- /を削除する pre = \u0026quot;\u0026lt;i class='fa fa-home'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 1 [[menu.main]] name = \u0026quot;About\u0026quot; identifier = \u0026quot;about\u0026quot; url = \u0026quot;/about/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-id-card'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 2 [[menu.main]] name = \u0026quot;Blog\u0026quot; identifier = \u0026quot;blog\u0026quot; url = \u0026quot;/blog/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-newspaper'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 3  urlの部分で先頭の/を削除することで，上記問題を回避することできます．\n 以上で今回紹介する内容は終了になります．\n参考となる記事などがあまりなかったので，試行錯誤しながら行いました．\nそのため，もっと簡単にする方法が他にもあるかもしれないですので，もし他にあれば，Twitterなどでコメント頂けると大変助かります．\n","date":"2020-07-13","permalink":"https://masatakashiwagi.github.io/portfolio/post/hugo-portfolio/","tags":["portfolio","tips"],"title":"Hugoを使ったポートフォリオ作成"}]