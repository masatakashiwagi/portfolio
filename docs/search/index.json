[{"content":"はじめに 最近，新卒の方々と面談や面接をする機会が増え，その際に \u0026ldquo;どうして新卒で入った会社から今の会社に転職しようと思ったんですか？\u0026rdquo; と聞かれることが多いので，改めて自分の中で整理しておきたいなーと思い，この記事を書いてます．\nTwitterで転職記事を書かれている方を見かけて僕も整理しておこうと思ったのも理由の1つです．\nちなみに僕が転職したのは2018年の3月なので，約3年前ぐらい（26歳ぐらいの時）になります． なので，今と状況が違う部分もあるということは理解して貰えればと思います．\n転職を決意した理由を書く前に，簡単にバックグラウンドについて書きたいと思います．\n大学・大学院では物理の研究をしていました．研究内容については割愛しますが，数値計算やシミュレーションを通して物性の特性を理解するといったことをしていました．\n数値計算やシミュレーションをしていく中で，プログラミングやデータ分析といったことに興味が湧いてきたのと社会的に意義がある仕事がしたいと当時は思っていて，新卒では大手通信事業者に入りました．（情報系のことはほとんど知らない状態でした笑）\n余談ですが，数値計算とかは物理系の人ならあるあるだと思いますが，Fortranで行っていました．なので，PythonとかJuliaとかは当時は知らなかったし書いたことはなかったです笑．\nどうして転職をしようと思ったのか いきなり結論を書きますが，理由は大きく3つありました．\n1. 市場価値がある人材になりたい\n2. 一度きりの人生で興味関心のある仕事がしたい\n3. 知的好奇心を持ち続けられる領域に居たい\n\u0026ldquo;どうして新卒で入った会社から今の会社に転職しようと思ったんですか？\u0026ldquo;という質問には大体上記のような内容で答えています．\n1つずつ理由を書こうと思いますが，少しダラダラとした内容になってしまうかもしれないので．興味がある人は読んで頂ければと\u0026hellip;\n1. 市場価値がある人材になりたい 市場価値と言うと要するに，\u0026quot;マーケットでどれだけ必要とされる人材か\u0026ldquo;ということです．\n前職当時，SEとして働いていましたが，プログラムを書くことも特になく，興味があったデータ分析の仕事も出来ていない状態でした． これは大企業ならよくあることですが，SEはプログラムを書くことは殆どなく，要件定義やパートナー企業のマネジメントや調整業務を行うことがメインでした．（もちろん全ての場合が上記のような内容ではないと思います）\nこのままだと，同じ会社に居続ける分には問題ないかもしれないですが，大企業の看板が取れた時，自分自身のスキルや経験にどれだけの価値があるのだろうと漠然と不安になった記憶があります．もちろん続けて行けば，経験は身に付くと思いますが，スキルは自分自身が本当に身に付けたいものなのかと言う部分に疑問が生まれました． また，開発や分析業務に志願しても大企業では簡単に異動も出来ないですし，先輩がいる中では基本的には年功序列で異動していく感じでしたので，自分の番が来て，かつ希望するポジションに空きがあるかどうかは運次第なので，厳しい状況でした．\n入社する前に上記のことはわかっていたかもしれないですが，そこは僕の見通しが甘かったと思います．\nそうゆうことがあり，当時の仕事を続けていても，市場価値が上がる未来が見えなかったこともあり，第二新卒として転職しようと思いました．\nどれだけ多くの人から必要とされるか，社会の役に立つことができるかを僕は意識すべきと思っています．それを達成するためにまずは身近な人達から頼りにされたり，その人達の手助けができるかが大事だとも思ってます．それらを自分自身が楽しめるまた興味がある分野で挑戦したいし，そこで価値を高めたいと思った次第です．\nじゃあ，どの分野で市場価値を高めるかですが，これは2つ目の理由にも繋がりますが，僕の場合はデータ分析に興味があり，データ分析は多くの業界や分野で必要とされている状況だったのでそこで価値を高めたいと思ったという流れです．\nP.S. 市場価値がある人材になれ！と新卒時のOJTで配属されたチームのボスに事あるごとに言われてました笑．\n2. 一度きりの人生で興味関心のある仕事がしたい これはそのままの感じになりますが，一度きりの人生で興味や関心のある仕事がしたいと思ったためです． 1つ目の理由でも触れましたが，データ分析の仕事に興味があったのと，泥臭い作業でも苦にならない性格なので，データ分析の仕事に向いてるかなと思っていたのもありました．\nプラス後悔だけはしたくなかったのと，当時は特に失うものもなかったので，一度きりの人生でやってみたい仕事に挑戦した感じです．\nただ，これは僕の中でやり直すなら20代もしくは30代前半までかなと思っていました．\nやり直すことはいつでも出来ると言いますが，現実的に未経験で実績も特に無い場合，上記の年齢でないと厳しいのかなという印象です． また，もし結婚してる場合などでは，家族を養ったり守っていくためには，なかなか冒険も出来なくなるんじゃないかなと思ってます．\nそうゆう意味でチャレンジするなら，出来るだけ早くという意識で転職する決断をしました．\n3. 知的好奇心を持ち続けられる領域に居たい 僕は飽きっぽい部分もあり，色々とやって見たいし知りたいしという性格です．\nデータ分析と言っても扱うデータの種類や分析する手法も様々だったり，技術進歩のスピードが半端ないので，この分野なら退屈することはないかなと個人的に思っていました笑．\nなので，知的好奇心を常に持ち続けられる領域で仕事が出来たら楽しいだろうなーと思っていました．が，日々勉強しないといけないし，思った以上に学ぶべきことも大量にあるので非常に大変だなーと今は感じています笑．\nさいごに 転職当時の想いとしては，上に挙げたような点が理由で転職しました． 転職する理由は人それぞれなので，正解はもちろん無いです．\nただ，自分自身で納得できているのであれば良いですが，後悔の無い選択はすべき かなと思ってます．\n最後にですが，僕はこの決断をして良かったと思っています．というのもデータ分析の職についてから，勉強会・Twitter・Kaggleなどで前職のままだと知り合うことが出来なかったであろう人達と知り合うことが出来たので，めっちゃ楽しい人生になってるなーって感じだからです笑．\nP.S. もしこの記事読んでくださった方で，何か聞きたいことがあれば，答えられる範囲で答えますので，是非是非質問下さい．\n","date":"2020-12-31","permalink":"https://masatakashiwagi.github.io/portfolio/post/first_job_change/","tags":["job"],"title":"新卒から2年弱で大企業から転職した理由"},{"content":"Kaggle MoAにTeam 90\u0026rsquo;sで初参加 このブログは2020/9/4~12/1まで開催していたMoAコンペでの取り組みを紹介する内容です．\n（コンペの詳細な内容については割愛します）\n今回のコンペでは，同世代のメンバーでチームを組んで取り組みました！\nチーム結成の経緯は，Twitterでお互いが90年生まれということを知って，同世代でKaggleチーム組んで戦いたいねーという感じだったと思います．\nそれが少し前のことで当時取り組める良い感じのコンペがなかったのですが，今回テーブルデータのコンペで取り組めそうということで始まりました．\nチームでの取り組みはとにかく学びが多く，終盤までモチベーションを保つことができたのが大きかったです．\nまた，議論することで理解なども深まっていくので，コンペを通してより成長できたんじゃないかなと思います．\n今回の僕たちのチームでの取り組み方を紹介すると\n1. 情報はSlackで共有\n2. 分析方針や実験結果はGithubのissueで管理\n3. 毎週末に2時間程度のディスカッション\nといった感じです．\n3番目の週末のディスカッションは強制ではなく，参加可能な人が参加する形式で運用してました． （と言いつつもみんな真面目に毎回参加してました笑）\n今回はチームでの取り組み方針の具体的な内容について少しだけ掘り下げます．\n1. 情報はSlackで共有 Slackをどうゆう感じで活用していたのかというと，\nコンペのDiscussionやNotebookの内容について疑問点などを話し合ったり，それ以外にも進め方の相談や雑談などを基本的に行っていました． あとはsubmitする時は一言声をかけるなどのsubmit管理もしていました．\nこうゆうのがあれば良かったなーというところでは，新着のDiscussionやNotebookをKaggleから連携して通知する仕組みを用意しておければ尚良かったのかなと思いました．\n2. 分析方針や実験結果はGithubのissueで管理 Githubをどうゆう感じで活用していたのかというと，\n分析での実験毎に1つのissueを立てて，そこでどうゆう実験をしたのかsubmitした結果のスコアがどうだったのかなどを記録として残してました． また，共通で使える特徴量生成のコードだったり，CVの切り方のコードなどの共有も行ってました．\nその他にはDiscussionの内容を整理したり，情報をまとめるために活用したりしていました．\n3. 毎週末に2時間程度のディスカッション 週末にGoogle meetでオンラインディスカッションでしていて，そこで何をしていたかというと，\n基本的には，今週何をしたのかを各々共有したり，わからない部分を話し合ってどうゆうふうに次進めて行くかなどをチームで考えていました． あとは，次の週でどうゆうことをするかの方向性を決めて終わる感じでした．\nもちろん雑談や仕事での苦労を労ったりもしていました笑\n最終順位 最終順位は4373チーム中34位の銀メダルで、金メダルまであともう少しのところまで行ったので，とても悔しい結果となりました．\n個人的にはInferenceの処理がエラーで通らない状況に最後の3日ぐらいでなって泣きそうになりました． チームメンバーにはweight0の状態で非常に申し訳なかったなと思ってます泣\n学習時に回していたノートブックでは，スコアがチーム内で作ったモデルの中でも上位5つ以内に入っていたので，アンサンブル時には効いてただろうなと思うと尚更です．\n個人的な成長としては，テーブルデータに対してNeuralNetが有効に作用する場面について多少理解が深まったと感じています．\n今回のMoAでは，マルチラベルの予測だったので，一度に大量のクラスを予測する場合にはNNが有効でかつGBDT系と比較して計算速度も速いんだなと感じました．\nまた，特徴量的にも交互作用的な部分はNN内部の中間層の組み方などで実現できるので，GBDT系みたく大量に特徴量を用意しなくても対処できるのが大きいのかなと思っています．（今回のケースだとGBDTで大量のモデルを作るとなると速度的な部分で特徴量が膨大になるとかなり厳しい感じでした）\nあとは，NNの実装をPytorchで行ったこともあり，Pytorchの扱い方がわかるようになったのは大きいと思っています．（仕事ではTensorflowだったりするので\u0026hellip;）\nPytorchでの実装に関してはもっと進めて行きたいのとコードの整理も合わせてして行きたいので，次に参加予定のコンペではその辺りも意識して挑めたらなーと思います．\n","date":"2020-12-11","permalink":"https://masatakashiwagi.github.io/portfolio/post/kaggle-moa/","tags":["kaggle"],"title":"Kaggle MoAの振り返り"},{"content":"リストの更新処理でハマってしまった失敗 今回は，初期化したリストを更新した際にハマってしまった失敗があるので，備忘録として残しておきます．\npythonで決まった形のリストを予め作成しておきたい場合に，以下のようにすることがあると思います．\nshape you want: [[0, 0], [0, 0], [0, 0]] # 要素が2つあるリストが3つ \u0026gt;\u0026gt;\u0026gt; list1 = [[0] * 2] * 3 \u0026gt;\u0026gt;\u0026gt; list1 [[0, 0], [0, 0], [0, 0]]  そして，上記リストを何かしらの値で更新したい場合を考えます． 今回だと，[0][0]の要素を更新するとします．\n\u0026gt;\u0026gt;\u0026gt; list1[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list1 [[3.5, 0], [3.5, 0], [3.5, 0]]  結果は，各リストの0番目の要素が全て更新されています． この原因は，list1 = [[0] * 2] * 3と書くと，要素のリストが全て同じオブジェクトになってしまうからです．\n\u0026gt;\u0026gt;\u0026gt; id(list1[0]) == id(list1[1]) == id(list1[2]) True  これにより，どこかの要素を変更すると全て変わってしまうということになります．\n多次元配列の初期化時の注意 上記の結果を回避するためにはリスト内包表記を使うと解決することができます． 先程の例の場合，以下のように書くといいです．\n\u0026gt;\u0026gt;\u0026gt; list2 = [[0] * 2 for i in range(3)] \u0026gt;\u0026gt;\u0026gt; list2 [[0, 0], [0, 0], [0, 0]]  内包表記を使うと，リストはそれぞれ異なるオブジェクトとして扱われます．\n\u0026gt;\u0026gt;\u0026gt; id(list2[0]) == id(list2[1]) == id(list2[2]) False  ですので，[0][0]の要素を更新すると，意図した部分だけが更新され問題ありません．\n\u0026gt;\u0026gt;\u0026gt; list2[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list2 [[3.5, 0], [0, 0], [0, 0]]  リストを初期化する際はこれらに注意しておかないと，本来の意図とは違う動きになってしまいます．\n参考 Pythonのリスト（配列）を任意の値・要素数で初期化\n","date":"2020-09-12","permalink":"https://masatakashiwagi.github.io/portfolio/post/list-objects/","tags":["python","tips"],"title":"ネストしたリストの更新処理"},{"content":"ポートフォリオ作成 こちらのQiitaの記事でHugoを使って簡単にポートフォリオを作成できるというのを見かけたので，以前まで使っていたpersonal pageを移植しました．\n移植した際に少し詰まった部分があるので，Tipsとしてこの記事で紹介します．\nこの記事は以前に使用していたHugo Themeの内容になります\n最初はHugo Theme Cactus Plusというテーマで作成していたのですが，再度作り直してます．\n（再作成した理由は，少しだけ凝ったテーマを使って見たくなったためです笑）\n作り直したテーマはHugo Future Imperfect Slimになります．\nHugoはシンプルなデザインが多いので非常にオススメです．\n基本的な構築方法は上記Qiitaの記事に沿って行っています．\n別途追加した要素としては，最初に作成したHugo Theme Cactus Plusと作り直したHugo Future Imperfect Slimそれぞれありますので，この際どちらも紹介します．\n  Hugo Theme Cactus Plus\n メニューの追加設定 Custom-CSSの設定（custom-cssの設定は簡単に設定できますので，今回は割愛します）    Hugo Future Imperfect Slim\n faviconの設定 github.ioでサイトをhostした場合のpath設定    個人的には，1回目に作成したテーマより2回目の方が簡単でした．\nHugo Theme Cactus Plus: メニューの追加設定 Hugo Theme Cactus Plusのテーマでは，デフォルトでAbout/Archive/Tagsの3つがメニューとして存在しています．\n今回はそこにProjectsを新しく追加しましたので，その方法を記載します．\n実施することとしては，以下の4ステップになります．\n content配下にprojectsディレクトリを作成し，_index.mdファイルを配置する．\n記事などのページ情報はcontentで管理します．  ├── content │ ├── about │ ├── posts │ └── projects │ └── _index.md   themes/layouts/partials配下にあるnav.htmlにProjectsのリンクを追記する．\nこれはTagsなどのリンクをコピーして，nameの部分はprojectsに修正すれば大丈夫です．\nメニューバーにProjectsを表示させるために，この部分を修正する必要があります．\n  themes/layouts/section配下にabout.htmlをコピーして，projects.htmlにrenameする．\nここに追加することで，セクションのトップページとして扱われることになります．\n  最後に，コマンドラインでhugoを実行する．\nhugoコマンドを実行することで，必要なものが自動生成・反映されます．\n  以上でメニューを追加することができます．\n（他のテーマでは，もう少し簡単にメニュー追加が可能なものもあります）\nHugo Future Imperfect Slim: faviconの設定 faviconを設定する方法は，下記の3ステップになります．\n まず，下記のデフォルトのconfig.tomlの内容のうち，faviconとfaviconVersionを変更します．  [params.meta] description = \u0026quot;A theme by HTML5 UP, ported by Julio Pescador. Slimmed and enhanced by Patrick Collins. Multilingual by StatnMap. Powered by Hugo.\u0026quot; author = \u0026quot;HTML5UP and Hugo\u0026quot; favicon = false \u0026lt;-- trueに変更する svg = true faviconVersion = \u0026quot;1\u0026quot; \u0026lt;-- 1を削除する msColor = \u0026quot;#ffffff\u0026quot; iOSColor = \u0026quot;#ffffff\u0026quot;   config.tomlを修正したら，static配下にfaviconディレクトリを作成する．\n  static/favicon配下にfavicon.icoとfavicon-32x32.pngを配置する．\nなぜfavicon-32x32かというと？\n layouts/partials/meta.htmlのrel=iconに以下が記載されている  favicon-32x32 favicon-16x16 site.webmanifest    なので，これに合わせて名前を変更するかwebmanifestを新しく作成し，その中に諸々の内容を記載する必要がある．\n  Hugo Future Imperfect Slim: github.ioでサイトをhostした場合のpath設定 今回作成したサイトをgithub.ioでhostした場合に発生した内容です．\n各メニューのURLとして，https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/home/などとなって欲しいのですが， https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/portfolio/home/とportfolioが重なってしまうエラーが発生しました．\n上記エラーを回避する方法の紹介になります．\nconfig.tomlファイルに各メニューの設定をする箇所があります．\n[menu] [[menu.main]] name = \u0026quot;Home\u0026quot; identifier = \u0026quot;home\u0026quot; url = \u0026quot;/\u0026quot; \u0026lt;-- /を削除する pre = \u0026quot;\u0026lt;i class='fa fa-home'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 1 [[menu.main]] name = \u0026quot;About\u0026quot; identifier = \u0026quot;about\u0026quot; url = \u0026quot;/about/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-id-card'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 2 [[menu.main]] name = \u0026quot;Blog\u0026quot; identifier = \u0026quot;blog\u0026quot; url = \u0026quot;/blog/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-newspaper'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 3  urlの部分で先頭の/を削除することで，上記問題を回避することできます．\n 以上で今回紹介する内容は終了になります．\n参考となる記事などがあまりなかったので，試行錯誤しながら行いました．\nそのため，もっと簡単にする方法が他にもあるかもしれないですので，もし他にあれば，Twitterなどでコメント頂けると大変助かります．\n","date":"2020-07-13","permalink":"https://masatakashiwagi.github.io/portfolio/post/hugo-portfolio/","tags":["portfolio","tips"],"title":"Hugoを使ったポートフォリオ作成"},{"content":"はじめに 今回は，先日初めて見たファイル形式のExcel Binary Workbook (xlsb)に関して，pythonでcsvにパースする話です．\n.xlsxはよくあるExcelファイルの形式ですが，それのバイナリー形式である.xlsbに関しての話です．（今まで見たことなかった拡張子です笑）\nExcelの闇やExcelとの格闘は色々ありますが，今回はそこをグッと堪えて進めたいと思います笑\n.xlsbとは Weblio辞書によると以下のように記載されています．\n .xlsbとは，Excel 2007で作成したブックを「XML形式でないバイナリブック」として保存する際に用いられる拡張子である．.xlsbでブックを保存した場合はファイル全体がバイナリ形式で保存され，XMLベースである.xlsxなどのファイル形式で保存した場合と比べて，ファイルサイズを数分の1程度に抑えることができる．\n 受け取ったファイルは.xlsb形式でも100MBぐらいあったため，.xlsx形式だとかなり容量が大きく，ファイルを開くと処理が重たくなることが想像できるので，圧縮したのだと考えられます．\nExcelを扱えるpythonライブラリ openpyxl 定番のopenpyxlです．\n上記ページにも記載されてますが，Excelファイルの拡張子である.xlsxを扱うことができます．\n openpyxl is a Python library to read/write Excel 2010 xlsx/xlsm/xltx/xltm files.\n いつものようにこのライブラリで処理しようとしたところ，下記のようなエラーが発生しました．\nopenpyxl.utils.exceptions.InvalidFileException: openpyxl does not support binary format .xlsb, please convert this file to .xlsx format if you want to open it with openpyxl  もう一度openpyxlの説明を見ると，確かに扱える拡張子はxlsx/xlsm/xltx/xltmとなっているので、.xlsbは扱えないのが分かります．\nそこで，.xlsbの拡張子が扱えるライブラリを調べたところ，pyxlsbというのがあるみたいなので，それを使うことにしました．\npyxlsb pyxlsbは公式の説明にあるように，xlsb形式を扱えるpythonライブラリになります．\n pyxlsb is an Excel 2007-2010 Binary Workbook (xlsb) parser for Python.\n インストールはpipですることができます．\npip install pyxlsb  公式のサンプルコードを記載しておきます．\nimport csv from pyxlsb import open_workbook with open_workbook('Book1.xlsb') as wb: for name in wb.sheets: with wb.get_sheet(name) as sheet, open(name + '.csv', 'w') as f: writer = csv.writer(f) for row in sheet.rows(): writer.writerow([c.v for c in row])  もしpandasのデータフレームに変換したい場合は，参考ページのコードで可能となります．\nただし，時刻変換に関して少し注意が必要なので，記載しておくと公式にもある通り，日付はfloatに変換されてしまうため，convert_date関数を使う必要があります．\n Note that dates will appear as floats. You must use the convert_date(date) method from the corresponding Workbook instance to turn them into datetime.\n なので，元のファイルに時刻が入っている場合には上記変換をコードの中に入れて処理する必要がありますのでご注意下さい．\nprint(wb.convert_date(41235.45578)) \u0026gt;\u0026gt;\u0026gt; datetime.datetime(2012, 11, 22, 10, 56, 19)  今回は個人的に嵌ってしまった.xlsb形式のファイルを扱う方法を紹介しましたが，出来ればデータ分析をするようなデータをExcelファイルで扱いたくないのが本音です．\nもちろん簡単なデータの可視化とか表計算とかExcelが活躍する場面は多々あると思うので，使い分けていきたいとは思います．\n参考 https://codeday.me/jp/qa/20190619/1049403.html\n","date":"2019-10-05","permalink":"https://masatakashiwagi.github.io/portfolio/post/excel_processing_using_python/","tags":["python"],"title":"Excel Binary WorkbookをPythonで処理"}]