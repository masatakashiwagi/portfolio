[{"content":"はじめに 今まで仕事では，開発環境としてIntelliJを使っていたのですが，最近はVSCodeの人気が高くExtensionsも便利なものが多くあるということで，個人的な作業をする時はVSCodeを使ってみようと思って使っています．\nそんな中で，タイトルにもあるようにVSCodeからgit pushしようとしたら，\u0026lt;アカウント名\u0026gt;@github.com: Permission denied (publickey).とエラーが出たので，それを解消してVSCodeでgit pushできるようにした備忘録になります．\nエラー原因（SSH接続エラー） Permission denied (publickey)とあり，GitHubにSSH接続するために，公開鍵を登録しておかないといけないのですが，それをしていなかったので，エラーが発生したということになります．\n以下のコマンドを打つことで接続を確認することができます．\nssh -T git@github.com \u0026gt; git@github.com: Permission denied (publickey).  ではどうすればいいかというと，鍵を生成してGithubに登録すればいいということになります．\n公開鍵と秘密鍵の作成 詳細な作成方法はこちらの記事が参考になります．\n簡単に手順を載せておきます．\ncd ~/.ssh ssh-keygen -t rsa -b 4096 -C \u0026quot;\u0026lt;メールアドレス\u0026gt;\u0026quot; -f github_rsa # オプションをいくつか設定して，鍵を生成 # 以下実行結果（一部マスクしてます） Generating public/private rsa key pair. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in github_rsa. Your public key has been saved in github_rsa.pub. The key fingerprint is: SHA256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx \u0026lt;メールアドレス\u0026gt; The key's randomart image is: +---[RSA 4096]----+ |=== | |.B o . | |o.. . * . o | |. . . B +. oo .o*| | . o * OSo.oooo*+| | . = + = o ..*..| | E . . o . . ..| | . . | | | +----[SHA256]-----+  鍵の種類をRSAにし，鍵の長さを4096にしています．ファイル名はgithub_rsaと設定しました．\nGithubに生成した公開鍵を登録 cd ~/.ssh ssh-add -K github_rsa # 秘密鍵をssh-agentデーモンに登録 pbcopy \u0026lt; github_rsa.pub # pbcopyコマンドで公開鍵の中身をクリップボードにコピー  この後は，コピーした公開鍵の中身をGithubに登録します．\nGithubのアカウントからSettingsに進み，SSH and GPG keysを選択し，New SSH keyを押して，先程コピーした中身をペーストし，名前を決めて保存します．\nSSH接続確認 保存が完了したら，SSH接続できるか確認するために，以下のコマンドを打って確認します．\nssh -T git@github.com \u0026gt;Hi \u0026lt;ユーザー名\u0026gt;! You've successfully authenticated, but GitHub does not provide shell access.  Remote設定の上書き ここまで来たら後一息で，最後にremoteの設定を上書きします．\n以下のような感じでリポジトリ名を書いて，実行すればOK．\ngit remote set-url origin git@github.com:\u0026lt;ユーザー名\u0026gt;/\u0026lt;リポジトリ名\u0026gt;.git  さいごに 上記までの設定が完了すれば，これでVSCodeの画面から簡単にgitにcommitやpushなどの操作を行うことができます．\nまだまだVSCode初心者なので，使いやすいExtensionsを取り入れて開発環境をカスタマイズしていきたいと思います！\n参考 初めてのgitは5ステップで完了\nGitHubでssh接続する手順~公開鍵・秘密鍵の生成から~\n","date":"2021-03-26","permalink":"https://masatakashiwagi.github.io/portfolio/post/vscode_git_connect/","tags":["python","tips","git","vscode"],"title":"VSCodeとgitを連携してpushできるようにするまで"},{"content":"RuntimeError: CUDA error: device-side assert triggeredの解決方法 Pytorchでモデルを作成していた際に，RuntimeError: CUDA error: device-side assert triggeredが発生して，原因がよくわからなかったので，調べたことをメモしておきます．\nエラー発生の原因 調べてみると，原因としては\n ライブラリのVersionが違う ラベル/クラスの数とネットワークの入出力のshapeが異なる loss関数の入力が正確でない  などなど\u0026hellip;\nよくあるのが，下2つかなと思います．\nラベル/クラスの数とネットワークの入出力のshapeが異なる 想定しているラベルもしくはクラス数とネットワークの出力のクラス数が異なる場合，この場合はnn.Linear(input, num_class)で合わせてやる必要がある．\nloss関数の入力が正確でない 僕が遭遇したのはこちらのパターンになります．\n例えば，BCELossを考えた場合，計算するためには値としては0~1を取る必要があります．そのため普通は最終出力にSigmoid, Softmax関数を入れるかと思います．\nそれ以外にもLossの設計で以下のようにしておくと良いかと思います．\nclass BCELoss(nn.Module): def __init__(self): super().__init__() self.bce = nn.BCELoss() def forward(self, input, target): input = torch.where(torch.isnan(input), torch.zeros_like(input), input) input = torch.where(torch.isinf(input), torch.zeros_like(input), input) input = torch.where(input\u0026gt;1, torch.ones_like(input), input) # 1を超える場合には1にする target = target.float() return self.bce(input, target)  他の解決方法 他にも調べていると解決方法としてCUDAの設定を以下にすると良いなどもありましたが，解決するかどうかはよくわからないです．\nCUDA_LAUNCH_BLOCKING=1  参考 https://towardsdatascience.com/cuda-error-device-side-assert-triggered-c6ae1c8fa4c3\n","date":"2021-02-01","permalink":"https://masatakashiwagi.github.io/portfolio/post/cuda_error_device-side_assert_triggered/","tags":["tips"],"title":"CUDA error: Device-side assert triggeredの解決方法"},{"content":"Kaggle MoAにTeam 90\u0026rsquo;sで初参加 このブログは2020/9/4~12/1まで開催していたMoAコンペでの取り組みを紹介する内容です．\n（コンペの詳細な内容については割愛します）\n今回のコンペでは，同世代のメンバーでチームを組んで取り組みました！\nチーム結成の経緯は，Twitterでお互いが90年生まれということを知って，同世代でKaggleチーム組んで戦いたいねーという感じだったと思います．\nそれが少し前のことで当時取り組める良い感じのコンペがなかったのですが，今回テーブルデータのコンペで取り組めそうということで始まりました．\nチームでの取り組みはとにかく学びが多く，終盤までモチベーションを保つことができたのが大きかったです．\nまた，議論することで理解なども深まっていくので，コンペを通してより成長できたんじゃないかなと思います．\n今回の僕たちのチームでの取り組み方を紹介すると\n1. 情報はSlackで共有\n2. 分析方針や実験結果はGithubのissueで管理\n3. 毎週末に2時間程度のディスカッション\nといった感じです．\n3番目の週末のディスカッションは強制ではなく，参加可能な人が参加する形式で運用してました． （と言いつつもみんな真面目に毎回参加してました笑）\n今回はチームでの取り組み方針の具体的な内容について少しだけ掘り下げます．\n1. 情報はSlackで共有 Slackをどうゆう感じで活用していたのかというと，\nコンペのDiscussionやNotebookの内容について疑問点などを話し合ったり，それ以外にも進め方の相談や雑談などを基本的に行っていました． あとはsubmitする時は一言声をかけるなどのsubmit管理もしていました．\nこうゆうのがあれば良かったなーというところでは，新着のDiscussionやNotebookをKaggleから連携して通知する仕組みを用意しておければ尚良かったのかなと思いました．\n2. 分析方針や実験結果はGithubのissueで管理 Githubをどうゆう感じで活用していたのかというと，\n分析での実験毎に1つのissueを立てて，そこでどうゆう実験をしたのかsubmitした結果のスコアがどうだったのかなどを記録として残してました． また，共通で使える特徴量生成のコードだったり，CVの切り方のコードなどの共有も行ってました．\nその他にはDiscussionの内容を整理したり，情報をまとめるために活用したりしていました．\n3. 毎週末に2時間程度のディスカッション 週末にGoogle meetでオンラインディスカッションでしていて，そこで何をしていたかというと，\n基本的には，今週何をしたのかを各々共有したり，わからない部分を話し合ってどうゆうふうに次進めて行くかなどをチームで考えていました． あとは，次の週でどうゆうことをするかの方向性を決めて終わる感じでした．\nもちろん雑談や仕事での苦労を労ったりもしていました笑\n最終順位 最終順位は4373チーム中34位の銀メダルで、金メダルまであともう少しのところまで行ったので，とても悔しい結果となりました．\n個人的にはInferenceの処理がエラーで通らない状況に最後の3日ぐらいでなって泣きそうになりました． チームメンバーにはweight0の状態で非常に申し訳なかったなと思ってます泣\n学習時に回していたノートブックでは，スコアがチーム内で作ったモデルの中でも上位5つ以内に入っていたので，アンサンブル時には効いてただろうなと思うと尚更です．\n個人的な成長としては，テーブルデータに対してNeuralNetが有効に作用する場面について多少理解が深まったと感じています．\n今回のMoAでは，マルチラベルの予測だったので，一度に大量のクラスを予測する場合にはNNが有効でかつGBDT系と比較して計算速度も速いんだなと感じました．\nまた，特徴量的にも交互作用的な部分はNN内部の中間層の組み方などで実現できるので，GBDT系みたく大量に特徴量を用意しなくても対処できるのが大きいのかなと思っています．（今回のケースだとGBDTで大量のモデルを作るとなると速度的な部分で特徴量が膨大になるとかなり厳しい感じでした）\nあとは，NNの実装をPytorchで行ったこともあり，Pytorchの扱い方がわかるようになったのは大きいと思っています．（仕事ではTensorflowだったりするので\u0026hellip;）\nPytorchでの実装に関してはもっと進めて行きたいのとコードの整理も合わせてして行きたいので，次に参加予定のコンペではその辺りも意識して挑めたらなーと思います．\n","date":"2020-12-11","permalink":"https://masatakashiwagi.github.io/portfolio/post/kaggle-moa/","tags":["kaggle"],"title":"Kaggle MoAの振り返り"},{"content":"初期化したリストの更新処理でハマってしまった 今回は，初期化したリストを更新した際にハマってしまった失敗があるので，備忘録として残しておきます． 詳しい内容は参考サイトに載っています．（かなりわかりやすいです！）\npythonで決まった形のリストを予め作成しておきたい場合に，以下のようにすることがあると思います．\nshape you want: [[0, 0], [0, 0], [0, 0]] # 要素が2つあるリストが3つ \u0026gt;\u0026gt;\u0026gt; list1 = [[0] * 2] * 3 \u0026gt;\u0026gt;\u0026gt; list1 [[0, 0], [0, 0], [0, 0]]  そして，上記リストを何かしらの値で更新したい場合を考えます． 今回だと，[0][0]の要素を更新するとします．\n\u0026gt;\u0026gt;\u0026gt; list1[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list1 [[3.5, 0], [3.5, 0], [3.5, 0]]  結果は，各リストの0番目の要素が全て更新されています． この原因は，list1 = [[0] * 2] * 3と書くと，要素のリストが全て同じオブジェクトになってしまい，どこかの要素を変更すると全て変わってしまうからです．\n対処法 上記の結果を回避するためにはリスト内包表記を使うと解決することができます． 先程の例の場合，以下のように書くといいです．\n\u0026gt;\u0026gt;\u0026gt; list2 = [[0] * 2 for i in range(3)] \u0026gt;\u0026gt;\u0026gt; list2 [[0, 0], [0, 0], [0, 0]]  内包表記を使うと，リストはそれぞれ異なるオブジェクトとして扱われます．\nですので，[0][0]の要素を更新すると，意図した部分だけが更新され問題ありません．\n\u0026gt;\u0026gt;\u0026gt; list2[0][0] = 3.5 \u0026gt;\u0026gt;\u0026gt; list2 [[3.5, 0], [0, 0], [0, 0]]  リストを初期化する際はこれらに注意しておかないと，本来の意図とは違う動きになってしまいます．\nこうゆうミスを気にしたくない場合には，numpyのarrayで作りたいshapeを作成し，その後にリストに変換すれば良いかもしれないです．\n\u0026gt;\u0026gt;\u0026gt; np.zeros((2, 3)).tolist() # 0で初期化 [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]] # 0以外の場合 np.ones((2, 3)).tolist() # 1で初期化 np.full((2, 3), 5).tolist() # 任意の値で初期化  参考 Pythonのリスト（配列）を任意の値・要素数で初期化\n","date":"2020-09-12","permalink":"https://masatakashiwagi.github.io/portfolio/post/list-objects/","tags":["python","tips"],"title":"ネストしたリストの更新処理"},{"content":"ポートフォリオ作成 こちらのQiitaの記事でHugoを使って簡単にポートフォリオを作成できるというのを見かけたので，以前まで使っていたpersonal pageを移植しました．\n移植した際に少し詰まった部分があるので，Tipsとしてこの記事で紹介します．\nこの記事は以前に使用していたHugo Themeの内容になります\n最初はHugo Theme Cactus Plusというテーマで作成していたのですが，再度作り直してます．\n（再作成した理由は，少しだけ凝ったテーマを使って見たくなったためです笑）\n作り直したテーマはHugo Future Imperfect Slimになります．\nHugoはシンプルなデザインが多いので非常にオススメです．\n基本的な構築方法は上記Qiitaの記事に沿って行っています．\n別途追加した要素としては，最初に作成したHugo Theme Cactus Plusと作り直したHugo Future Imperfect Slimそれぞれありますので，この際どちらも紹介します．\n  Hugo Theme Cactus Plus\n メニューの追加設定 Custom-CSSの設定（custom-cssの設定は簡単に設定できますので，今回は割愛します）    Hugo Future Imperfect Slim\n faviconの設定 github.ioでサイトをhostした場合のpath設定    個人的には，1回目に作成したテーマより2回目の方が簡単でした．\nHugo Theme Cactus Plus: メニューの追加設定 Hugo Theme Cactus Plusのテーマでは，デフォルトでAbout/Archive/Tagsの3つがメニューとして存在しています．\n今回はそこにProjectsを新しく追加しましたので，その方法を記載します．\n実施することとしては，以下の4ステップになります．\n content配下にprojectsディレクトリを作成し，_index.mdファイルを配置する．\n記事などのページ情報はcontentで管理します．  ├── content │ ├── about │ ├── posts │ └── projects │ └── _index.md   themes/layouts/partials配下にあるnav.htmlにProjectsのリンクを追記する．\nこれはTagsなどのリンクをコピーして，nameの部分はprojectsに修正すれば大丈夫です．\nメニューバーにProjectsを表示させるために，この部分を修正する必要があります．\n  themes/layouts/section配下にabout.htmlをコピーして，projects.htmlにrenameする．\nここに追加することで，セクションのトップページとして扱われることになります．\n  最後に，コマンドラインでhugoを実行する．\nhugoコマンドを実行することで，必要なものが自動生成・反映されます．\n  以上でメニューを追加することができます．\n（他のテーマでは，もう少し簡単にメニュー追加が可能なものもあります）\nHugo Future Imperfect Slim: faviconの設定 faviconを設定する方法は，下記の3ステップになります．\n まず，下記のデフォルトのconfig.tomlの内容のうち，faviconとfaviconVersionを変更します．  [params.meta] description = \u0026quot;A theme by HTML5 UP, ported by Julio Pescador. Slimmed and enhanced by Patrick Collins. Multilingual by StatnMap. Powered by Hugo.\u0026quot; author = \u0026quot;HTML5UP and Hugo\u0026quot; favicon = false \u0026lt;-- trueに変更する svg = true faviconVersion = \u0026quot;1\u0026quot; \u0026lt;-- 1を削除する msColor = \u0026quot;#ffffff\u0026quot; iOSColor = \u0026quot;#ffffff\u0026quot;   config.tomlを修正したら，static配下にfaviconディレクトリを作成する．\n  static/favicon配下にfavicon.icoとfavicon-32x32.pngを配置する．\nなぜfavicon-32x32かというと？\n layouts/partials/meta.htmlのrel=iconに以下が記載されている  favicon-32x32 favicon-16x16 site.webmanifest    なので，これに合わせて名前を変更するかwebmanifestを新しく作成し，その中に諸々の内容を記載する必要がある．\n  Hugo Future Imperfect Slim: github.ioでサイトをhostした場合のpath設定 今回作成したサイトをgithub.ioでhostした場合に発生した内容です．\n各メニューのURLとして，https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/home/などとなって欲しいのですが， https://\u0026lt;アカウント名\u0026gt;.github.io/portfolio/portfolio/home/とportfolioが重なってしまうエラーが発生しました．\n上記エラーを回避する方法の紹介になります．\nconfig.tomlファイルに各メニューの設定をする箇所があります．\n[menu] [[menu.main]] name = \u0026quot;Home\u0026quot; identifier = \u0026quot;home\u0026quot; url = \u0026quot;/\u0026quot; \u0026lt;-- /を削除する pre = \u0026quot;\u0026lt;i class='fa fa-home'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 1 [[menu.main]] name = \u0026quot;About\u0026quot; identifier = \u0026quot;about\u0026quot; url = \u0026quot;/about/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-id-card'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 2 [[menu.main]] name = \u0026quot;Blog\u0026quot; identifier = \u0026quot;blog\u0026quot; url = \u0026quot;/blog/\u0026quot; \u0026lt;-- 先頭の/を削除する pre = \u0026quot;\u0026lt;i class='far fa-newspaper'\u0026gt;\u0026lt;/i\u0026gt;\u0026quot; weight = 3  urlの部分で先頭の/を削除することで，上記問題を回避することできます．\n 以上で今回紹介する内容は終了になります．\n参考となる記事などがあまりなかったので，試行錯誤しながら行いました．\nそのため，もっと簡単にする方法が他にもあるかもしれないですので，もし他にあれば，Twitterなどでコメント頂けると大変助かります．\n","date":"2020-07-13","permalink":"https://masatakashiwagi.github.io/portfolio/post/hugo-portfolio/","tags":["portfolio","tips"],"title":"Hugoを使ったポートフォリオ作成"},{"content":"はじめに 今回は，先日初めて見たファイル形式のExcel Binary Workbook (xlsb)に関して，pythonでcsvにパースする話です．\n.xlsxはよくあるExcelファイルの形式ですが，それのバイナリー形式である.xlsbに関しての話です．（今まで見たことなかった拡張子です笑）\nExcelの闇やExcelとの格闘は色々ありますが，今回はそこをグッと堪えて進めたいと思います笑\n.xlsbとは Weblio辞書によると以下のように記載されています．\n .xlsbとは，Excel 2007で作成したブックを「XML形式でないバイナリブック」として保存する際に用いられる拡張子である．.xlsbでブックを保存した場合はファイル全体がバイナリ形式で保存され，XMLベースである.xlsxなどのファイル形式で保存した場合と比べて，ファイルサイズを数分の1程度に抑えることができる．\n 受け取ったファイルは.xlsb形式でも100MBぐらいあったため，.xlsx形式だとかなり容量が大きく，ファイルを開くと処理が重たくなることが想像できるので，圧縮したのだと考えられます．\nExcelを扱えるpythonライブラリ openpyxl 定番のopenpyxlです．\n上記ページにも記載されてますが，Excelファイルの拡張子である.xlsxを扱うことができます．\n openpyxl is a Python library to read/write Excel 2010 xlsx/xlsm/xltx/xltm files.\n いつものようにこのライブラリで処理しようとしたところ，下記のようなエラーが発生しました．\nopenpyxl.utils.exceptions.InvalidFileException: openpyxl does not support binary format .xlsb, please convert this file to .xlsx format if you want to open it with openpyxl  もう一度openpyxlの説明を見ると，確かに扱える拡張子はxlsx/xlsm/xltx/xltmとなっているので、.xlsbは扱えないのが分かります．\nそこで，.xlsbの拡張子が扱えるライブラリを調べたところ，pyxlsbというのがあるみたいなので，それを使うことにしました．\npyxlsb pyxlsbは公式の説明にあるように，xlsb形式を扱えるpythonライブラリになります．\n pyxlsb is an Excel 2007-2010 Binary Workbook (xlsb) parser for Python.\n インストールはpipですることができます．\npip install pyxlsb  公式のサンプルコードを記載しておきます．\nimport csv from pyxlsb import open_workbook with open_workbook('Book1.xlsb') as wb: for name in wb.sheets: with wb.get_sheet(name) as sheet, open(name + '.csv', 'w') as f: writer = csv.writer(f) for row in sheet.rows(): writer.writerow([c.v for c in row])  もしpandasのデータフレームに変換したい場合は，参考ページのコードで可能となります．\nただし，時刻変換に関して少し注意が必要なので，記載しておくと公式にもある通り，日付はfloatに変換されてしまうため，convert_date関数を使う必要があります．\n Note that dates will appear as floats. You must use the convert_date(date) method from the corresponding Workbook instance to turn them into datetime.\n なので，元のファイルに時刻が入っている場合には上記変換をコードの中に入れて処理する必要がありますのでご注意下さい．\nprint(wb.convert_date(41235.45578)) \u0026gt;\u0026gt;\u0026gt; datetime.datetime(2012, 11, 22, 10, 56, 19)  今回は個人的に嵌ってしまった.xlsb形式のファイルを扱う方法を紹介しましたが，出来ればデータ分析をするようなデータをExcelファイルで扱いたくないのが本音です．\nもちろん簡単なデータの可視化とか表計算とかExcelが活躍する場面は多々あると思うので，使い分けていきたいとは思います．\n参考 Stack Overflow - Read XLSB File in Pandas Python\n追記 2020-01-05 pandasのversion=1.0.0で.xlsbファイルをロードできるようになったみたいです．\n方法はpd.read_excelの引数でengine=\u0026quot;pyxlsb\u0026quot;と指定するだけです．\n# Returns a DataFrame pd.read_excel(\u0026quot;path_to_file.xlsb\u0026quot;, engine=\u0026quot;pyxlsb\u0026quot;)  参考: https://pandas.pydata.org/docs/user_guide/io.html#io-xlsb\n","date":"2019-10-05","permalink":"https://masatakashiwagi.github.io/portfolio/post/excel_processing_using_python/","tags":["python","tips"],"title":"Excel Binary WorkbookをPythonで処理"}]